#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2007-2008  Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA. Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.
#
# Red Hat Author(s): Mike McGrath <mmcgrath@redhat.com>
#                    Toshio Kuratomi <tkuratom@redhat.com>
#
# TODO: put tmp files in a 700 tmp dir

import sys
import logging
import syslog
import os
import glob
import tempfile
import codecs
import datetime
import time
import itertools

from urllib2 import URLError
from fedora.client import AccountSystem, AuthError, ServerError

from optparse import OptionParser
from shutil import move, rmtree, copytree
from rhpl.translate import _

import ConfigParser

parser = OptionParser()

parser.add_option('-i', '--install',
                     dest = 'install',
                     default = False,
                     action = 'store_true',
                     help = _('Download and sync most recent content'))
parser.add_option('-I', '--info',
                     dest = 'info_username',
                     default = False,
                     metavar = 'info_username',
                     help = _('Get info about a user'))
parser.add_option('-c', '--config',
                     dest = 'CONFIG_FILE',
                     default = '/etc/fas.conf',
                     metavar = 'CONFIG_FILE',
                     help = _('Specify config file (default "%default")'))
parser.add_option('--nogroup',
                     dest = 'no_group',
                     default = False,
                     action = 'store_true',
                     help = _('Do not sync group information'))
parser.add_option('--nopasswd',
                     dest = 'no_passwd',
                     default = False,
                     action = 'store_true',
                     help = _('Do not sync passwd information'))
parser.add_option('--noshadow',
                     dest = 'no_shadow',
                     default = False,
                     action = 'store_true',
                     help = _('Do not sync shadow information'))
parser.add_option('--nohome',
                     dest = 'no_home_dirs',
                     default = False,
                     action = 'store_true',
                     help = _('Do not create home dirs'))
parser.add_option('--nossh',
                     dest = 'no_ssh_keys',
                     default = False,
                     action = 'store_true',
                     help = _('Do not create ssh keys'))
parser.add_option('-s', '--server',
                     dest = 'FAS_URL',
                     default = None,
                     metavar = 'FAS_URL',
                     help = _('Specify URL of fas server.'))
parser.add_option('-p', '--prefix',
                     dest = 'prefix',
                     default = None,
                     metavar = 'prefix',
                     help = _('Specify install prefix.  Useful for testing'))
parser.add_option('-e', '--enable',
                     dest = 'enable',
                     default = False,
                     action = 'store_true',
                     help = _('Enable FAS synced shell accounts'))
parser.add_option('-d', '--disable',
                     dest = 'disable',
                     default = False,
                     action = 'store_true',
                     help = _('Disable FAS synced shell accounts'))
parser.add_option('-a', '--aliases',
                     dest = 'aliases',
                     default = False,
                     action = 'store_true',
                     help = _('Sync mail aliases'))
parser.add_option('--nosession',
                     dest = 'nosession',
                     default = False,
                     action = 'store_true',
                     help = _('Disable the creation of ~/.fedora_session'))
parser.add_option('--debug',
                     dest = 'debug',
                     default = False,
                     action = 'store_true',
                     help = _('Enable debugging messages'))

(opts, args) = parser.parse_args()

log = logging.getLogger('fas')

try:
    config = ConfigParser.ConfigParser()
    if os.path.exists(opts.CONFIG_FILE):
        config.read(opts.CONFIG_FILE)
    elif os.path.exists('fas.conf'):
        config.read('fas.conf')
        print >> sys.stderr, "Could not open %s, defaulting to ./fas.conf" % opts.CONFIG_FILE
    else:
        print >> sys.stderr, "Could not open %s." % opts.CONFIG_FILE
        sys.exit(5)
except ConfigParser.MissingSectionHeaderError, e:
        print >> sys.stderr, "Config file does not have proper formatting - %s" % e
        sys.exit(6)

FAS_URL = config.get('global', 'url').strip('"')
if opts.prefix:
    prefix = opts.prefix
else:
    prefix = config.get('global', 'prefix').strip('"')

def _chown(arg, dir_name, files):
    os.chown(dir_name, arg[0], arg[1])
    for file in files:
        os.chown(os.path.join(dir_name, file), arg[0], arg[1])

class MakeShellAccounts(AccountSystem):
    temp = None
    _groups = []
    _memberships = {}
    _group_mapping = {}
    _valid_groups = {}
    _emails = {}
    _people = []
    _people_by = {}
    _all_people = {}

    ### Validation ###

    def valid_group(self, name, restriction=None):
        ''' Determine if group is valid on the system '''
        if restriction:
            return name in self.valid_groups[restriction]
        else:
            for restrict_key in self.valid_groups:
                if name in self.valid_groups[restrict_key]:
                    return True
        return False

    ### Attributes ###

    def _refresh_all_people(self, force=False):
        '''Get a list of all people.

        Get a list of all people in FAS and expose it in the all_people
        property.
        '''
        if not self._all_people or force:
            self._all_people = self.people_by_key(key='id', fields=['username'])

        return self._all_people

    all_people = property(_refresh_all_people)

    def _refresh_group_mapping(self, search='*', force=False):
        self._refresh_group_info(search, force)
        return self._group_mapping

    group_mapping = property(_refresh_group_mapping)

    def _refresh_memberships(self, search='*', force=False):
        self._refresh_group_info(search, force)
        return self._memberships

    memberships = property(_refresh_memberships)

    def _refresh_groups(self, search='*', force=False):
        '''Returns all groups.'''
        self._refresh_group_info(search, force)
        return self._groups

    groups = property (_refresh_groups)

    def _refresh_valid_groups(self, search='*', force=False):
        '''Return a dict of valid groups, including that of group_type '''
        self._refresh_group_info(search, force)
        return self._valid_groups

    valid_groups = property (_refresh_valid_groups)

    def _refresh_group_info(self, search='*', force=False):
        '''Refresh all group related information.'''
        if self._groups and self._memberships and self._group_mapping \
                and self._valid_groups and not force:
            return

        # Retrieve the groups
        params = {'search' : search}
        request = self.send_request('group/list', req_params=params, auth=True)
        self._groups = request['groups']

        # Retrieve the memberships
        memberships = {}
        for group in self._groups:
            memberships[group['name']] = []
            try:
                for member in request['memberships'][u'%s' % group['id']]:
                    memberships[group['name']].append(member)
            except KeyError:
                # Not all groups have members
                pass
        self._memberships = memberships

        # Retrieve the group_mapping
        group_mapping = {}
        for group in self._groups:
            gid = group['id']
            name = group['name']

            try:
                ''' Shoot me now I know this isn't right '''
                members = []
                for member in self._memberships[name]:
                    try:
                        members.append(self.all_people[member['person_id']]
                                ['username'])
                    except KeyError:
                        # User is not valid on this computer
                        pass
                memberships = ','.join(members)
                group_mapping[name] = members
            except KeyError:
                ''' No users exist in the group '''
                pass
        self._group_mapping = group_mapping

        # And generate the valid groups
        valid_groups = {'groups':[], 'restricted_groups':[],
                'ssh_restricted_groups': []}
        for restriction in valid_groups:
            for group in config.get('host', restriction).strip('"').split(','):
                if group == '':
                    continue
                if group == '@all':
                    for grp in self._groups:
                        if not grp['name'].startswith('cla'):
                            valid_groups[restriction].append(grp['name'])
                elif group.startswith('@'):
                    for grp in self._groups:
                        if grp['group_type'] == group[1:]:
                            valid_groups[restriction].append(grp['name'])
                else:
                    valid_groups[restriction].append(group)
        self._valid_groups = valid_groups

    valid_groups = property(_refresh_valid_groups)

    def _refresh_people(self, search='*', force=False):
        '''Return a list of people with accounts on this system.'''
        # Cached values present, return
        if self._people and self._people_by and not force:
            return

        req_groups = "%s,%s,%s" % (config.get('host', 'groups').strip('"'),
                                    config.get('host', 'restricted_groups').strip('"'),
                                    config.get('host', 'ssh_restricted_groups').strip('"'))
        params = {'search' : search, 'groups': req_groups }
        data = self.send_request('user/dump', req_params=params, auth=True)
        # Why did we include unapproved people before?
        #self._people = data['people'] + data['unapproved_people']
        self._people = data['people']

        # Get a list of keys (username and userid) associated with a person.
        # We can put both username and userid in a single dict because
        # username is a string and id is an int
        people = (((p['username'], p), (p['id'], p)) for p in data['people'])
        # We now have a list of lists of key:value pairs like this::
        #   [[(name1: p1), (id1: p1)], [(name2: p2), (id2: p2)]]
        # Use '*' to remove the outer list, then itertools.chain() to combine
        # the lists into one like this::
        #   [(name1: p1), (id1: p1), (name2: p2), (id2: p2)]
        # Finally, turn those key:value pairs into a dict
        self._people_by = dict(itertools.chain(*people))

    def _refresh_people_list(self, search='*', force=False):
        self._refresh_people(search, force)
        return self._people

    people = property(_refresh_people_list)

    def _refresh_people_by(self, search='*', force=False):
        self._refresh_people(search, force)
        return self._people_by

    people_by = property(_refresh_people_by)

    def _refresh_emails(self, search='*', force=False):
        '''Return email addresses for every user'''
        if not self._emails or force:
            params = {'search': search}
            self._emails = self.send_request('user/email_list',
                    req_params=params, auth=True)['emails']
        return self._emails
    emails = property(_refresh_emails)

    ### Other Info ###

    def ssh_key(self, person):
        ''' determine what ssh key a user should have '''
        for group in self.valid_groups['groups']:
            try:
                if person['username'] in self.group_mapping[group]:
                    return person['ssh_key']
            except KeyError:
                print >> sys.stderr, '%s could not be found in fas but was in your config under "groups"!' % group
                continue
        for group in self.valid_groups['restricted_groups']:
            try:
                if person['username'] in self.group_mapping[group]:
                    return person['ssh_key']
            except KeyError:
                print >> sys.stderr, '%s could not be found in fas but was in your config under "restricted_groups"!' % group
                continue
        for group in self.valid_groups['ssh_restricted_groups']:
            try:
                if person['username'] in self.group_mapping[group]:
                    command = config.get('users', 'ssh_restricted_app').strip('"')
                    options = config.get('users', 'ssh_key_options').strip('"')
                    key = 'command="%s",%s %s' % (command, options, person['ssh_key'])
                    return key
            except TypeError:
                print >> sys.stderr, '%s could not be found in fas but was in your config under "ssh_restricted_groups"!' % group
                continue
        return 'INVALID\n'

    def shell(self, username):
        ''' Determine what shell username should have '''
        for group in self.valid_groups['groups']:
            try:
                if username in self.group_mapping[group]:
                    return config.get('users', 'shell').strip('"')
            except KeyError:
                print >> sys.stderr, '%s could not be found in fas but was in your config under "groups"!' % group
                continue
        for group in self.valid_groups['restricted_groups']:
            try:
                if username in self.group_mapping[group]:
                    return config.get('users', 'restricted_shell').strip('"')
            except KeyError:
                print >> sys.stderr, '%s could not be found in fas but was in your config under "restricted_groups"!' % group
                continue
        for group in self.valid_groups['ssh_restricted_groups']:
            try:
                if username in self.group_mapping[group]:
                    return config.get('users', 'ssh_restricted_shell').strip('"')
            except KeyError:
                print >> sys.stderr, '%s could not be found in fas but was in your config under "ssh_restricted_groups"!' % group
                continue

        print >> sys.stderr, 'Could not determine shell for %s.  Defaulting to /sbin/nologin' % username
        return '/sbin/nologin'

    ### Actions ###

    def user_info(self, username):
        params = {'username' : username}
        data = self.send_request('user/view', req_params=params, auth=True)
        person = data['person']
        print person
        print "User: %s" % person['username']
        print " Name: %s" % person['human_name']
        print " Created: %s" % person['creation'].split(' ')[0]
        print " Timezone: %s" % person['timezone']
        print " IRC Nick: %s" % person['ircnick']
        print " Locale: %s" % person['locale']
        print " Status: %s" % person['status']
        print " Approved Groups: "
        approved = False
        for group in person['approved_memberships']:
            print "   %s" % group['name']
            approved = True
        if approved == False:
            print "    None"

        print
        print " Unapproved Groups: "
        unapproved = False
        for group in person['unapproved_memberships']:
            print "   %s" % group['name']
            unapproved = True
        if unapproved == False:
            print "    None"

    def groups_text(self, groups=None, people=None):
        i = 0
        file = open(self.temp + '/group.txt', 'w')
        if not self.groups:
            self.group_list()
        # First create all of our users/groups combo
        for person in self.people:
            uid = person['id']
            username = person['username']
            file.write("=%i %s:x:%i:\n" % (uid, username, uid))
            file.write("0%i %s:x:%i:\n" % (i, username, uid))
            file.write(".%s %s:x:%i:\n" % (username, username, uid))
            i = i + 1

        for group in self.groups:
            gid = group['id']
            name = group['name']
            try:
                ''' Shoot me now I know this isn't right '''
                members = []
                for member in self.memberships[name]:
                    members.append(self.all_people[member['person_id']]['username'])
                memberships = ','.join(members)
                self.group_mapping[name] = members
            except KeyError:
                ''' No users exist in the group '''
                pass
            # This block catches group mappings for inactive users.  Needs to be fixed in tg
            try:
                file.write("=%i %s:x:%i:%s\n" % (gid, name, gid, memberships))
                file.write("0%i %s:x:%i:%s\n" % (i, name, gid, memberships))
                file.write(".%s %s:x:%i:%s\n" % (name, name, gid, memberships))
            except UnboundLocalError:
                pass
            i = i + 1
        file.close()

    def passwd_text(self, people=None):
        i = 0
        # Touch shadow and secure the permissions
        shadow_file = codecs.open(self.temp + '/shadow.txt', mode='w', encoding='utf-8')
        shadow_file.close()
        os.chmod(self.temp + '/shadow.txt', 00600)

        passwd_file = codecs.open(self.temp + '/passwd.txt', mode='w', encoding='utf-8')
        shadow_file = codecs.open(self.temp + '/shadow.txt', mode='w', encoding='utf-8')
        for person in self.people:
            username = person['username']
            uid = person['id']
            password = person['password']
            home_dir = "%s/%s" % (config.get('users', 'home').strip('"'), username)
            shell = self.shell(username)
            passwd_file.write("=%s %s:x:%i:%i:%s:%s:%s\n" % (uid, username, uid, uid, username, home_dir, shell))
            passwd_file.write("0%i %s:x:%i:%i:%s:%s:%s\n" % (i, username, uid, uid, username, home_dir, shell))
            passwd_file.write(".%s %s:x:%i:%i:%s:%s:%s\n" % (username, username, uid, uid, username, home_dir, shell))
            shadow_file.write("=%i %s:%s:99999:0:99999:7:::\n" % (uid, username, password))
            shadow_file.write("0%i %s:%s:99999:0:99999:7:::\n" % (i, username, password))
            shadow_file.write(".%s %s:%s:99999:0:99999:7:::\n" % (username, username, password))
            i = i + 1
        passwd_file.close()
        shadow_file.close()

    def make_aliases_txt(self):
        ''' update your mail aliases file '''
        if not self.groups:
            groups = self.group_list()

        email_file = codecs.open(self.temp + '/aliases', mode='w', encoding='utf-8')
        email_template = codecs.open(config.get('host', 'aliases_template').strip('"'))
        email_file.write("# Generated by fasClient\n")
        for line in email_template.readlines():
            email_file.write(line)
        ### FIXME: This looks wrong.  I think this is getting *all* email
        # addresses in FAS and making aliases for them.  It should be getting
        # email addresses for people with cla_done + 1 other group.
        sorted_emails = self.emails.keys()
        sorted_emails.sort()
        for person in sorted_emails:
            email_file.write("%s: %s\n" % (person, self.emails[person]))
        for group in self.groups:
            name = group['name']
            members = {}
            for membership in self.memberships[name]:
                role_type = membership['role_type']
                person = self.all_people[membership['person_id']]['username']
                if person not in sorted_emails:
                    # If the person isn't in sorted_emails, their account has
                    # been inactivated.  Don't add them to the group aliases
                    continue
                try:
                    members['members'].append(person)
                except KeyError:
                    members['members'] = []
                    members['members'].append(person)
                if role_type == 'user':
                    continue

                try:
                    members['sponsors'].append(person)
                except KeyError:
                    members['sponsors'] = []
                    members['sponsors'].append(person)
                if role_type == 'sponsor':
                    continue

                try:
                    members['administrators'].append(person)
                except KeyError:
                    members['administrators'] = []
                    members['administrators'].append(person)
            for role in members:
                email_file.write("%s-%s: %s\n" % (name, role, ','.join(sorted(members[role]))))
        email_file.close()

    def make_group_db(self):
        self.groups_text()
        os.system('makedb -o %s/group.db %s/group.txt' % (self.temp, self.temp))

    def make_passwd_db(self):
        self.passwd_text()
        os.system('makedb -o %s/passwd.db %s/passwd.txt' % (self.temp, self.temp))
        os.system('makedb -o %s/shadow.db %s/shadow.txt' % (self.temp, self.temp))
        os.chmod(self.temp + '/shadow.db', 00400)
        os.chmod(self.temp + '/shadow.txt', 00400)

    def install_passwd_db(self):
        try:
            move(self.temp + '/passwd.db', os.path.join(prefix + '/var/db/passwd.db'))
        except IOError, e:
            print "ERROR: Could not write passwd db - %s" % e

    def install_shadow_db(self):
        try:
            move(self.temp + '/shadow.db', os.path.join(prefix + '/var/db/shadow.db'))
        except IOError, e:
            print "ERROR: Could not write shadow db - %s" % e

    def install_group_db(self):
        try:
            move(self.temp + '/group.db', os.path.join(prefix + '/var/db/group.db'))
        except IOError, e:
            print "ERROR: Could not write group db - %s" % e

    def install_aliases_txt(self):
        move(self.temp + '/aliases', prefix + '/etc/aliases')
        os.system("newaliases > /dev/null")

    def create_homedirs(self):
        ''' Create homedirs and home base dir if they do not exist '''
        home_base = os.path.join(prefix + config.get('users', 'home').strip('"'))
        home_backup_dir = config.get('users', 'home_backup_dir').strip('"')
        if not os.path.exists(home_base):
            os.makedirs(home_base, mode=0755)
        for person in self.people:
            home_dir = os.path.join(home_base, person['username'])
            if not os.path.exists(home_dir):
                old_home_dir = glob.glob(os.path.join(home_backup_dir, person['username']) + '-*')
                if old_home_dir:
                    syslog.syslog('Restoring old homedir for %s' % person['username'])
                    move(old_home_dir[0], home_dir)
                else:
                    syslog.syslog('Creating homedir for %s' % person['username'])
                    copytree('/etc/skel/', home_dir)
                    os.path.walk(home_dir, _chown, [person['id'], person['id']])
            # Code for chmod/chown
            #os.chmod(home_dir, something)

    def remove_stale_homedirs(self):
        ''' Remove homedirs of users that no longer have access '''
        home_base = os.path.join(prefix + config.get('users', 'home').strip('"'))
        try:
            home_backup_dir = config.get('users', 'home_backup_dir').strip('"')
        except ConfigParser.NoOptionError:
            home_backup_dir = '/var/tmp/'
        users = os.listdir(home_base)
        for user in users:
            if user not in self.people_by:
                if not os.path.exists(home_backup_dir):
                    os.makedirs(home_backup_dir)
                syslog.syslog('Backed up %s to %s' % (user, home_backup_dir))
                target = '%s-%s' % (user, time.mktime(datetime.datetime.now().timetuple()))
                move(os.path.join(home_base, user), os.path.join(prefix + home_backup_dir, target))
                # Code for chmod/chown
                #home_dir = os.path.join(home_base, user)
                #os.chown(home_dir, 0, 0)
                #os.chmod(home_dir, 0700)

    def create_ssh_keys(self):
        ''' Create ssh keys '''
        home_base = prefix + config.get('users', 'home').strip('"')
        for person in self.people:
            username = person['username']
            ssh_dir = os.path.join(home_base, username, '.ssh')
            if person['ssh_key']:
                key = self.ssh_key(person)
                if not os.path.exists(ssh_dir):
                    os.makedirs(ssh_dir, mode=0700)
                f = codecs.open(os.path.join(ssh_dir, 'authorized_keys'), mode='w', encoding='utf-8')
                f.write(key + '\n')
                f.close()
                os.chmod(os.path.join(ssh_dir, 'authorized_keys'), 0600)
                os.path.walk(ssh_dir, _chown, [person['id'], person['id']])

    ### Support ###

    def mk_tempdir(self):
        self.temp = tempfile.mkdtemp('-tmp', 'fas-', os.path.join(prefix + config.get('global', 'temp').strip('"')))

    def rm_tempdir(self):
        rmtree(self.temp)

def enable():
    temp = tempfile.mkdtemp('-tmp', 'fas-', config.get('global', 'temp').strip('"'))

    old = open('/etc/sysconfig/authconfig', 'r')
    new = open(temp + '/authconfig', 'w')
    for line in old:
        if line.startswith("USEDB"):
            new.write("USEDB=yes\n")
        else:
            new.write(line)
    new.close()
    old.close()
    try:
        move(temp + '/authconfig', '/etc/sysconfig/authconfig')
    except IOError, e:
        print "ERROR: Could not write /etc/sysconfig/authconfig - %s" % e
        sys.exit(5)
    os.system('/usr/sbin/authconfig --updateall')
    rmtree(temp)

def disable():
    temp = tempfile.mkdtemp('-tmp', 'fas-', config.get('global', 'temp').strip('"'))
    old = open('/etc/sysconfig/authconfig', 'r')
    new = open(temp + '/authconfig', 'w')
    for line in old:
        if line.startswith("USEDB"):
            new.write("USEDB=no\n")
        else:
            new.write(line)
    old.close()
    new.close()
    try:
        move(temp + '/authconfig', '/etc/sysconfig/authconfig')
    except IOError, e:
        print "ERROR: Could not write /etc/sysconfig/authconfig - %s" % e
        sys.exit(5)
    os.system('/usr/sbin/authconfig --updateall')
    rmtree(temp)


if __name__ == '__main__':
    if opts.enable:
        enable()
    if opts.disable:
        disable()

    if not (opts.install or opts.enable or opts.disable or opts.aliases):
        parser.print_help()
        sys.exit(0)

    try:
        fas = MakeShellAccounts(FAS_URL, username=config.get('global',
            'login').strip('"'), password=config.get('global',
                'password').strip('"'), debug=opts.debug,
            cache_session=opts.nosession)
    except AuthError, e:
        sys.stderr.write('%s\n' % str(e))
        sys.exit(1)
    except URLError, e:
        sys.stderr.write('Could not connect to %s - %s\n' % (FAS_URL,
            e.reason[1]))
        sys.exit(9)

    if opts.info_username:
        fas.user_info(opts.info_username)
    if opts.install:
        fas.mk_tempdir()
        fas.make_group_db()
        fas.make_passwd_db()
        if not opts.no_group:
            fas.install_group_db()
        if not opts.no_passwd:
            fas.install_passwd_db()
        if not opts.no_shadow:
            fas.install_shadow_db()
        if not opts.no_home_dirs:
            fas.create_homedirs()
            fas.remove_stale_homedirs()
        if not opts.no_ssh_keys:
            fas.create_ssh_keys()
        fas.rm_tempdir()

    if opts.aliases:
        fas.mk_tempdir()
        fas.make_aliases_txt()
        fas.install_aliases_txt()
        fas.rm_tempdir()

    fas.logout()
    sys.exit(0)
