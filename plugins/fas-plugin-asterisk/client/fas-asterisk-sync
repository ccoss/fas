#!/usr/bin/python
# -*- coding: utf-8 -*-
# Note: this requires python-genshi 0.5 or higher to run (deps on NewTextTemplate)

import os
from fedora.client.fas2 import AccountSystem
import ConfigParser
import optparse
import logging
from rhpl.translate import _
from genshi.template import NewTextTemplate
import md5
import sha
import tempfile
import codecs
from asterisk.manager import Manager

import sys

from shutil import move, rmtree

def generateUsersConf(fas):

    people = fas.people_by_id()

    asterisk_group = fas.group_by_name('cla_done')
    asterisk_attrs = fas.send_request('asterisk/dump')['asterisk_attrs']

    userids = [user[u'person_id'] for user in asterisk_group[u'approved_roles']]
    userids.sort()

    users = []
    for userid in userids:
        try:
            if asterisk_attrs[u'%s' % userid]['enabled'] == u'1':
                person = people[userid]
                users.append(('5%06d' % userid,
                        person[u'username'],
                        person[u'human_name'],
                        md5.new('%s:fedoraproject.org:%s' % (person[u'username'],
                                                            asterisk_attrs[u'%s' % userid]['pass'])).hexdigest()))
        except KeyError:
            pass

    template = NewTextTemplate(""";
[general]
callwaiting = yes
threewaycalling = yes
callwaitingcallerid = yes
transfer = yes
canpark = yes
cancallforward = yes
callreturn = yes
callgroup = 1
pickupgroup = 1
hassip = yes
host = dynamic
hasiax = no
hash323 = no
hasmanager = no
allowsubscribe = yes
subscribecontext=fedorapeople
{% for userid, username, human_name, md5secret in users %}\

[${username}]
fullname = ${human_name}
email = ${username}@fedoraproject.org
md5secret = ${md5secret}
hasvoicemail = yes
hasdirectory = yes
delete = yes
context = from-contributor
alternateexts = ${userid}
{% end %}\
""")

    return template.generate(users=users).render(encoding='utf-8')

def install_file(content, filename):
    new_hash = sha.new(content).digest()
    try:
        old_hash = sha.new(file(filename, 'r').read()).digest()
        if old_hash == new_hash:
            return False
    except IOError:
        # if we can't open/read the file it may not exist so try writing a new one
        pass
    tempname = filename + '.' + file('/dev/random').read(4).encode('hex')
    try:
        file(tempname, 'w').write(content)
        os.rename(tempname, filename)
    except:
        os.unlink(tempname)
    return True

if __name__ == '__main__':
    log = logging.getLogger('fas')

    parser = optparse.OptionParser()

    parser.add_option('-i', '--install',
                      dest = 'install',
                      default = False,
                      action = 'store_true',
                      help = _('Download and sync most recent content'))
    parser.add_option('-c', '--config',
                      dest = 'CONFIG_FILE',
                      default = '/etc/fas.conf',
                      metavar = 'CONFIG_FILE',
                      help = _('Specify config file (default "%default")'))
    parser.add_option('-s', '--server',
                      dest = 'FAS_URL',
                      default = None,
                      metavar = 'FAS_URL',
                      help = _('Specify URL of fas server.'))
    parser.add_option('-d', '--display',
                      dest = 'display',
                      default = False,
                      action = 'store_true',
                      help = _('Print file to std out.'))
    parser.add_option('-p', '--prefix',
                      dest = 'prefix',
                      default = None,
                      metavar = 'prefix',
                      help = _('Specify install prefix.  Useful for testing'))
    parser.add_option('-r', '--reload',
                      dest = 'reload',
                      default = False,
                      action = 'store_true',
                      help = _('Reload Asterisk after installing configuration files.'))
    parser.add_option('--debug',
                      dest = 'debug',
                      default = False,
                      action = 'store_true',
                      help = _('Enable debugging messages'))

    (opts, args) = parser.parse_args()

    log = logging.getLogger('fas')

    try:
        config = ConfigParser.ConfigParser()
        if os.path.exists(opts.CONFIG_FILE):
            config.read(opts.CONFIG_FILE)
        elif os.path.exists('fas.conf'):
            config.read('fas.conf')
            print >> sys.stderr, "Could not open %s, defaulting to ./fas.conf" % opts.CONFIG_FILE
        else:
            print >> sys.stderr, "Could not open %s." % opts.CONFIG_FILE
            sys.exit(5)
    except ConfigParser.MissingSectionHeaderError, e:
        print >> sys.stderr, "Config file does not have proper formatting - %s" % e
        sys.exit(6)

    if opts.FAS_URL:
        FAS_URL = opts.FAS_URL
    else:
        FAS_URL = config.get('global', 'url').strip('"')

    if opts.prefix:
        prefix = opts.prefix
    else:
        prefix = config.get('global', 'prefix').strip('"')

    if opts.display or opts.install:
        fas = AccountSystem(FAS_URL)

        fas.username = config.get('global', 'login').strip('"')
        fas.password = config.get('global', 'password').strip('"')

        users_conf = generateUsersConf(fas)

        if opts.display:
            sys.stdout.write(users_conf)
        else:
            users_conf_changed = install_file(users_conf, os.path.join(prefix, '/etc/asterisk/users.conf'))

            if users_conf_changed and opts.reload and prefix == '/':
                manager = Manager()
                manager.connect('127.0.0.1')
                manager.login('fas','fas')
                manager.command('sip reload')
                manager.command('dialplan reload')
                manager.command('module reload app_voicemail_plain.so')

    else:
        parser.print_help()
