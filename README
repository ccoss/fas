=====================
Fedora Account System
=====================

:Authors: Ricky Zhou
	  Mike McGrath
	  Toshio Kuratomi
	  Yaakov Nemoy
:Contact: infrastructure@lists.fedoraproject.org
:Date: Wed, 26 March, 2008
:For FAS version: 0.8.x

The Fedora Account System holds information on Fedora Contributors to give
them access to the wonderful things that Fedora has.

.. contents::

This is a TurboGears_ project. It can be started by running the start-fas
script.

.. _TurboGears: http://www.turbogears.org

---------
Upgrading
---------

0.8.7 => 0.8.8
==============
We still haven't worked out using migrate scripts on our database servers so
the changes here need to be done like this:

  sudo -u postgres psql fas2 < updates/fas2-0.8.7_to_0.8.8.sql

0.8.5 => future
===============

From 0.8.5 and onward we will be using SQLAlchemy Migrate to handle database
upgrades.  To use it, it assumes you have already installed fas2.sql into your
posgresql database. The instructions for installing SQLAlchemy-Migrate on top
can be found below in the installation instructions.  

sqlalchemy-migrate will need to be installed.  To do so, run:

 sudo yum -y install python-migrate

(Since I don't trust this yet,  the latest change will need to add:
+    invite_only BOOLEAN DEFAULT FALSE,
to the groups table.  There is a migrate script checked in.  Need to verify
that it works and that we'll do that.)

0.8.4 => 0.8.5
==============

When upgrading to 0.8.5 the database schema changed slightly.  The configs
table now has a unique constraint to prevent duplicates being entered.  Use
this to update your existing schema::

  sudo -u postgres psql fas2 < updates/fas2-0.8.4_to_0.8.5.sql

0.8.3 => 0.8.4
==============

When upgrading from 0.8.3 to 0.8.4 there are some new database changes:

  :groups.url: URL where others can look for information about the group
  :groups.mailing_list: Specify a mailing list address that others can use to
  	contact the group
  :groups.mailing_list_url: A url where others can look at list archives and
  	sign up
  :groups.irc_network: IRC network on which the IRC channel is
  :groups.irc_channel: IRC channel where communication with the group occurs
  :people.country_code: Two digit country code for where the user is from
  :user_group: View that allows mod_auth_pgsql to work with the db
  :session: Table for doing OpenID sessions.

You can add these to your database by running the sql commands in
``updates/fas2-0.8.3_to_0.8.4.sql`` like this::

  sudo -u postgres psql fas2 < updates/fas2-0.8.3_to_0.8.4.sql

The country code functionality also makes use of python-GeoIP.  This should
be installed as a dependency if you use the fas rpms.  Otherwise you need to
install that manually::

  sudo yum -y install python-GeoIP

-------------
Prerequisites
-------------

Before you can get started, make sure to have the following packages installed
(example being from Fedora 8 with a local postgresql database server)::

  yum install git-core postgresql-plpython postgresql-server postgresql-python \
  python-TurboMail TurboGears pygpgme python-sqlalchemy python-genshi \
  python-psycopg2 pytz python-babel babel python-GeoIP python-openid \
  python-fedora python-migrate python-memcached pyOpenSSL gettext

  # Note: on RHEL5 you need postgresql-pl instead of postgresql-plpython

  yum install git-core postgresql-pl postgresql-server postgresql-python \
  python-TurboMail TurboGears pygpgme python-sqlalchemy python-genshi \
  python-psycopg2 pytz python-babel babel python-GeoIP python-openid \
  python-fedora python-migrate python-memcached pyOpenSSL gettext

At present, the database needs to be a postgres database since we use triggers
to manage some of the data (like syncing accounts with bugzilla).

If you are unfamiliar with postgres and this is your first time installing it,
you will want to generate the database and allow users to connect.  First as
root run::

On Fedora:

   service postgresql initdb

On other systems:

  /etc/init.d/postgresql initdb

Then make sure the bottom of /var/lib/pgsql/data/pg_hba.conf looks like::

  # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

  # "local" is for Unix domain socket connections only
  local   all         all                               ident
  # IPv4 local connections:
  #host    all         all         127.0.0.1/32          ident
  host    all         all         127.0.0.1/32          md5
  # IPv6 local connections:
  #host    all         all         ::1/128               ident
  host    all         all         ::1/128               md5


Then just start the postgres database:

  /etc/init.d/postgresql start

-------
Hacking
-------

Get the code
============

If you want to hack on the Account System you need to checkout the module.
  git clone git://git.fedorahosted.org/git/fas
  cd fas

Generate Metadata
=================

Once you are inside you're fresh checkout, you need to regenerate some files
that are created by the build script, setup.py::
  python setup.py egg_info && python setup.py build

This will create the fas.egg-info directory which has metadata about the
program.  It allows things like the identity provider to work.

Start up Postgres
=================

Do any configuration necessary and start up the postgres server.  Then make the
plpython language available on new databases, create a postgres user to manage
the data and import the schema::
  sudo -u postgres createlang plpythonu template1
  sudo -u postgres createuser --encrypted --pwprompt fedora
  sudo -u postgres psql < fas2.sql

Then you need to import changes to make your database current with the latest
development version.

NOTE: In other distros, the command might just be 'migrate'
::
  sqlalchemy-migrate version_control postgres://fedora:password@localhost/fas2 ./database #one time
  sqlalchemy-migrate manage manage.py --repository=database --url=postgres://fedora:password@localhost/fas2 #one time
  python manage.py upgrade #everytime you pull changes that include DB updates

Don't forget, do *not* commit your manage.py scriptlet. 'manage.py' is
included in .gitignore, but if you use another name, .gitignore can't ignore
it.  It is specific to your development environment.

You can find out more about how to use SQLAlchemy-Migrate here:

http://code.google.com/p/sqlalchemy-migrate/

Configure FAS Settings
======================

The last thing to do is configure the application to use your settings.
You'll need to rename fas.cfg-sample to fas.cfg and change the following
lines::
  mail.on = False # Set to True if you want to test notification sending
  mail.server = 'localhost' # Your mail server
  # Fill in the password you gave in the createuser step and the db host if
  # it's not localhost.
  sqlalchemy.dburi = "postgres://fedora:pass@localhost/fas2"
  server.socket_port=8088 # Change if you don't want to run on port 8088
  # Change the port if you changed server.socket_port above.
  base_url_filter.base_url = "http://localhost:8088/"

You may also need to change some of the directories and settings in
fas/config/app.cfg.

OpenID
======

For OpenID support, run tg-admin -c fas.cfg sql create to create the
OpenID tables.


Start the Server
================

You should then be able to start the server and test things out::
  ./start-fas
  # browse to http://localhost:8088/accounts/

The default administrative user is "admin" with password "admin"

Another handy command for trying short snippets of code is tg-admin shell.
Make sure you're in the top level directory that start-fas.py and dev.cfg is
in, then run::
  tg-admin shell


----------------------------
Apache + mod_wsgi deployment
----------------------------

WSGI or, Web Server Gateway Interface is a specification to allow servers and
applications to communicate with each other.  It's one method that allows Turbo
Gears to scale properly.  To install it run:

  # yum -y install httpd mod_wsgi

next create a configuration file in /etc/httpd/conf.d/accounts.conf with the
following information in it:

# File Start
WSGISocketPrefix /var/run/wsgi

# Repress TG's stdoutput
WSGIRestrictStdout On

# TG implements its own signal handler.
WSGIRestrictSignal Off

# These are the real tunables
WSGIDaemonProcess daemon processes=2 threads=2 maximum-requests=1000 user=fas display-name=fas inactivity-timeout=30
WSGIPythonOptimize 1

WSGIScriptAlias /accounts /path/to/turbogears/fas/fas.wsgi/accounts

<Directory /path/to/turbogears/fas/>
    WSGIProcessGroup fas
    Order deny,allow
    Allow from all
</Directory>

#EOF

Finally edit fas.wsgi and add the proper values for your setup and start the
server with:

/etc/init.d/httpd start

--------------------
Enabling Local Users
--------------------
* THIS IS EXPERIMENTAL *

To allow local users to log in to your system, first enable fas via the
client in fas/client/fasClient.py

  ./fasClient -e

To disable run

  ./fasClient -d

To sync with your local install run:

  ./fasClient -i

To test, look and see if your groups or users show up with getent.  For
example:

  getent passwd
  getent group

------------
Localization
------------

We use the translation services at transifex.net to manage po files, coordinate
people translating strings, and merge new strings to the files.  The following
instructions briefly tell how to use transifex to update the source languages
files and pull new translations for release.  Actually doing translations can
be found in the `transifex user's guide`_.

.. `transifex user's guide`:: http://help.transifex.net/user-guide/translating.html


To generate the POT file (located in the po/ subdirectory), run the
following from the top level directory::

  pybabel extract -F pybabel.conf -o po/fas.pot fas/

Then upload this pot file to transifex::
  tx push -s

To pull messages from transifex prior to making a release, do::
  tx pull -a

Transifex will perform merging of strings for you.

To enable the languages in FAS, you must compile the PO files and places them
where TurboGears will look for them.  Then you need to enable the language to
be available to users by adding it to po/LINGUAS.

Remember that we commit to the git repo the pot file and the po files.  We do
not commit mo files.

-------
Plugins
-------

FAS2 has a plugin system for adding new functionality.  There is a sample,
dummy plugin in the FAS2 install that you can try out and use as the basis
of your own plugins.  Enabling it for testing currently requires a few
steps.  When installed things will be much simpler::

  cd plugins/dummy_plugin
  python setup.py egg_info
  cd ../
  export PYTHONPATH=${PYTHONPATH}:`pwd`/dummy_plugin
  cd ../
  ./start-fas

You should then be able to browse to::
  http://localhost:8088/accounts/dummy

and see some simple output from the dummy plugin.

In a real install, the plugin will be installed to a directory already on your
PYTHONPATH (for instance, site-packages) so there won't be a need to set the
PYTHONPATH variable explicitly.

----------------
Making a Release
----------------

1. Make sure that any feature branches you want have been merged.
2. Update the version in fas.spec and fas/release.py.  Commit the changes to
   the master branch.
3. Push the results to the server.
4. Make a fresh clone of the repository::
      cd /var/tmp
      git clone git://git.fedorahosted.org/git/fas
5. Make the source tarball in that directory::
      cd /var/tmp/fas
      python setup.py sdist
6. Make rpms from the tarball.  You can use the koji dist-5E-epel-infra build
   target for that::
      mv dist/*.tar.gz .
      rpmbuild-md5 -bs --nodeps fas.spec
      koji build --scratch dist-5E-epel-infra fas*.src.rpm
7. Upload the tarball to fedorahosted.  Copy the rpms from koji to the
   infrastructure repository::
      scp fas*tar.gz fedorahosted.org:/srv/web/releases/f/a/fas/
      ssh puppet1
      wget # all rpm files from the scratch build
      rpm --addsign *.rpm
      # Move rpms to the epel infrastructure dir
      # createrepo the new repository
8. tag the release::
      cd [LOCAL GIT REPO]
      git tag [RELEASE VERSION NUMBER]
      git push --tags
9. Install in staging and test.  Then upgrade the app servers.
